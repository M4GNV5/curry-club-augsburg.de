<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Curry Club Augsburg</title>
    <link href="http://curry-club-augsburg.de/atom.xml" rel="self" />
    <link href="http://curry-club-augsburg.de" />
    <id>http://curry-club-augsburg.de/atom.xml</id>
    <author>
        <name>Curry Club Augsburg</name>
        <email>post@curry-club-augsburg.de</email>
    </author>
    <updated>2017-04-21T00:00:00Z</updated>
    <entry>
    <title>Programm für das sechsundzwanzigste Treffen am 18. Mai 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2017-04-21-sechsundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2017-04-21-sechsundzwanzigstes-treffen.html</id>
    <published>2017-04-21T00:00:00Z</published>
    <updated>2017-04-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das sechsundzwanzigste Treffen am 18. Mai 2017</h1>
    <div class="info">
      Gepostet am 21. Apr 17
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Xaver stellt hfish vor, seine in Haskell geschriebene Shell, die muit diversen Altlasten herkömmlicher Shells aufräumt.</p>
<p>Tim beginnt eine voraussichtlich zweiteilige Reihe über <em>Theoreme für lau</em> (<em>Theorems for free</em>). Es geht los mit einem Einführungsvortrag zu einigen Grundlagen: Wieso terminiert eigentlich jedes Programm im einfach typisierten Lambda-Kalkül? Und was sind funktionale Relationen?</p>
<p>Corny spricht zum Thema <em>Build your own Linux container in Rust from scratch in &lt;200 LoC</em>. Es ist low-level, es wird dreckig, alles ist unsafe{}, nichts ist sicher und wir vergraben unsere Köpfe leicht im Linux-Kernel.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das fünfundzwanzigste Treffen am 20. April 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2017-03-23-f%C3%BCnfundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2017-03-23-f%C3%BCnfundzwanzigstes-treffen.html</id>
    <published>2017-03-23T00:00:00Z</published>
    <updated>2017-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das fünfundzwanzigste Treffen am 20. April 2017</h1>
    <div class="info">
      Gepostet am 23. Mär 17
      
          von Matthias Hutzler
      
    </div>
    
    
  </header>

  <p>Manuel hielt einen Vortrag mit dem Titel <em>Kenn dein Limit</em>. Es ging darum, Grenzwerte von reellen Funktionen zu berechnen – und zwar (halb-)automatisch und verifiziert in Isabelle.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/DCb3NT1GDo8?list=PLwpepnYDFK9Mj6zO-ug2DzM03TOSUqz22" frameborder="0" allowfullscreen>
</iframe>
<p>Matthias hielt einen “Kurzvortrag” zu 4d-Grafik mit Haskell, OpenGL und dem <a href="https://hackage.haskell.org/package/linear">linear</a>-Paket. Mit “4d-Grafik” ist dabei nicht “besonders gute 3d-Grafik” oder “3d-Grafik + Gerüche + dein Sitz bewegt sich” gemeint, sondern: (bewegte) Bilder von vierdimensionalen geometrischen Objekten.</p>
<p>Code: https://github.com/MatthiasHu/4d-labyrinth</p>
<p>4d-Vortrag auf dem 33c3 (englisch): https://youtu.be/ct0_g1amEpw</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/WzBhboEIkSE?list=PLwpepnYDFK9Mj6zO-ug2DzM03TOSUqz22" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das vierundzwanzigste Treffen am 23. März 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2017-02-23-vierundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2017-02-23-vierundzwanzigstes-treffen.html</id>
    <published>2017-02-23T00:00:00Z</published>
    <updated>2017-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das vierundzwanzigste Treffen am 23. März 2017</h1>
    <div class="info">
      Gepostet am 23. Feb 17
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Uwap wird eine Einführung in lineare Logik und lineare Typsysteme geben. Klassische und intuitionistische Logik verfolgt das Ziel schlussfolgerungen zu ermöglichen. Was aber nun, wenn ich nicht eine Wahrheit A und eine Wahrheit B habe, sondern eine Ressource A und eine Ressource B? Wir werden sehen, dass wir so an unendlich Bonbons kommen können und wie uns Lollis dabei helfen es besser zu machen.</p>
<p>Daniel stellt Rust vor.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Vierter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Januar 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2017-01-03-vierter-workshop.html" />
    <id>http://curry-club-augsburg.de/posts/2017-01-03-vierter-workshop.html</id>
    <published>2017-01-03T00:00:00Z</published>
    <updated>2017-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Vierter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Januar 2017</h1>
    <div class="info">
      Gepostet am  3. Jan 17
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <div class="right">
<p><a href="/files/haskellworkshop-plakat3.pdf"> <img width="300" src="/files/haskellworkshop-plakat3.png" /> </a></p>
</div>
<p>Liebe Freundinnen der Sonne!</p>
<p>Wir, der Curry Club Augsburg, laden alle Interessierten herzlich zu der Fortsetzung unseres <strong>Haskell-Workshops</strong> ein. Diese findet am <strong>21. Januar 2017</strong>, einem Samstag, von 9:00 Uhr bis 17:00 Uhr im <strong>OpenLab Augsburg</strong> statt. Wie bei den vorherigen Malen ist die Teilnahme kostenlos.</p>
<p>Zielgruppe des Workshops sind alle Teilnehmerinnen der ersten drei Workshops. Etwas genauer: Man sollte in der Lage sein, ein Haskell-Programm zu schreiben, dass die Anzahl Blätter eines binären Baums zählt. Diese Aufgabe darf ruhig ein wenig dauern! Der Workshop richtet sich an alle, die keine Neulinge mehr sind; Expertin muss man aber noch lange nicht sein. Ganz besonders möchten wir die Teilnehmenden des dritten Workshops vom 17. Dezember 2016 ermuntern, an diesem Folgeworkshop teilzunehmen.</p>
<p>Wichtigster Programmpunkt beim Folgeworkshop sind Monaden (griechisch für “putzige flauschige Dinge”). Damit könnt ihr Ein- und Ausgabe betreiben, den Programmfluss pervers verbiegen, veränderliche Variablen bedienen (wenn es unbedingt sein muss), Dateiformate parsen, Logikrätsel lösen und Spiele programmieren. Außerdem werden wir über QuickCheck sprechen, einer sehr beliebten Möglichkeit, um die paar Programmierfehler, die das Typsystem nicht findet, zu fangen.</p>
<p>Damit wir unsere Kapazität überblicken können, ist zur Teilnahme eine verpflichtende aber unverbindliche <a href="https://ola.pads.ccc.de/haskell-workshop-2017a">vorherige Anmeldung</a> nötig.</p>
<p>Wir freuen uns auf euch!</p>
<p>Euer Team vom Curry Club</p>
<!--more-->
<blockquote>
<p>Was ist schneller als C++, prägnanter als Perl, regelmäßiger als Python, flexibler als Ruby, typisierter als C#, robuster als Java und hat absolut nichts mit PHP gemeinsam? Es ist Haskell!</p>
<p>Haskell ist eine moderne und innovative Programmiersprache, die sich von bekannten imperativen Sprachen in vielerlei Hinsicht deutlich unterscheidet: Ein Haskell-Programm besteht nicht etwa aus einer Abfolge von auszuführenden Anweisungen, sondern aus einer Ansammlung von Deklarationen, deren Reihenfolge keine Rolle spielt. Auch gibt es keine veränderlichen Variablen, und ausgewertet wird nur, was wirklich benötigt wird; unendliche Datenstrukturen sind möglich und sinnvoll.</p>
<p>Dieses Denkparadigma mag anfangs sehr ungewohnt sein, zieht jedoch eine Reihe von Vorteilen mit sich: Da es keine Nebenwirkungen wie beispielsweise globale Variablen gibt, kann man Code rein lokal verstehen. Damit wird es einfacher, modular Komponenten zusammenzubauen, sich Datenflüsse klarzumachen und Code auf seine Korrektheit hin zu überprüfen. Insbesondere vereinfacht sich die Programmierung mit Threads enorm.</p>
<p>Ferner ist Haskells starkes statisches Typsystem eine große Hilfe beim Programmieren und verhindert viel mehr Fehler schon während des Kompilierens, als man vielleicht aus anderen Sprachen gewohnt ist. Es gibt das Motto, dass, wenn Haskell-Code erst einmal erfolgreich durchkompiliere, er dann auch schon korrekt sei. Das ist sicherlich übertrieben, hat aber einen erstaunlich wahren Kern.</p>
<p>Beim Erlernen von Haskell lernt man viele neue Herangehensweisen kennen, die auch in anderen Sprachen nützlich sind; das ist einer der Hauptvorteile an Haskell, der auch dann noch relevant ist, wenn man aus verschiedenen Gründen im täglichen Leben nicht in Haskell programmieren möchte.</p>
</blockquote>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das dreiundzwanzigste Treffen am 23. Februar 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2017-01-01-dreiundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2017-01-01-dreiundzwanzigstes-treffen.html</id>
    <published>2017-01-01T00:00:00Z</published>
    <updated>2017-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das dreiundzwanzigste Treffen am 23. Februar 2017</h1>
    <div class="info">
      Gepostet am  1. Jan 17
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Tim stellte die experimentelle Programmiersprache Frank (<a href="https://arxiv.org/pdf/1611.09259.pdf">Paper</a>, <a href="https://github.com/cmcl/frankjnr">Implementierung</a>) vor. In Frank gibt es Werte und Berechnungen. Jede Berechnung ist dabei getaggt mit den Effekten, die sie ausführen möchte. Berechnungen können an Funktionen übergeben werden. Beim Aufruf einer Berechnung müssen entweder Handler für ihre benötigten Effekte angegeben werden oder diese Effekte werden im Typsystem weiter nach außen propagiert (damit müssen sie weiter außen gehandhabt werden).</p>
<p>Vorteile von Frank sind:</p>
<ul>
<li>Es ist sehr einfach und natürlich, Code mit Nebeneffekten so abstrakt zu schreiben, dass man ihn in verschiedenen Kontexten verwenden kann und auch gut testen kann.</li>
<li>Man kann rein funktionalen und effektbehafteten Code sehr gut kombinieren: In Haskell ruft man ja rein funktionalen Code aus IO-Actions auf, aber man kann nicht andersrum eine IO-Action in rein funktionalem Code verwenden. Dies führt dazu, dass viele Funktionen in einer rein funktionalen und in einer IO/monadischen Variante existieren, wie z.B. <code>map</code> und <code>mapM</code> (beide wenden eine Funktion auf jedes Element einer Liste an). In Frank hat man stattdessen eine Funktion <code>map : {X -&gt; Y} -&gt; List X -&gt; List Y</code>, die man sowohl auf effektfreie Funktionen, als auch auf effektbehaftete Berechnungen anwenden kann.</li>
</ul>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/llrmAQ09EtQ?list=PLwpepnYDFK9MmWxIhryXFeMLyjAB9zFEP" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo erzählte über Continuations.</p>
<ul>
<li><p>Tutorial zum Umgang mit Continuations: Was sind Continuations? Wie geht man mit ihnen um? Welche Vorteile haben Sprachen, die Continuations eingebaut haben (wie etwa Scheme) oder die in einer angenehmen Syntax mit Continuations nachgerüstet werden können (wie etwa Haskell mit der Continuation-Monade)? Was hat es mit der CPS-Transformation auf sich? Wie kann man dank Continuations OpenGL-Grafikprogrammierung so aussehen lassen, als ob man in QBASIC der 90er Jahre programmiert? Sind Continuations auch gefährlich? Wieso sagt alle Welt, dass die Continuation-Monade die Mutter aller Monaden sei?</p></li>
<li><p>Konstruktive Mathematik ist nicht nur ein Teil von klassischer Mathematik (das ist klar: alles, was man konstruktiv beweisen kann, gilt auch klassisch), sondern umgekehrt ist vermöge der “Doppelnegationsübersetzung” auch klassische Mathematik ein Teil von konstruktiver Mathematik. Mit der richtigen Brille (der Curry–Howard-Brille) betrachtet, ist die Doppelnegationsübersetzung genau dasselbe wie die CPS-Transformation.</p></li>
</ul>
<p>Die Doppelnegationsübersetzung wurde in den 30ern entdeckt, die CPS-Transformation in den 70ern. In den 90ern wurde offenbar, dass es sich um dieselbe Entdeckung handelte.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLwpepnYDFK9MmWxIhryXFeMLyjAB9zFEP" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das zweiundzwanzigste Treffen am 26. Januar 2017</title>
    <link href="http://curry-club-augsburg.de/posts/2016-12-19-zweiundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2016-12-19-zweiundzwanzigstes-treffen.html</id>
    <published>2016-12-19T00:00:00Z</published>
    <updated>2016-12-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das zweiundzwanzigste Treffen am 26. Januar 2017</h1>
    <div class="info">
      Gepostet am 19. Dez 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p><a href="https://github.com/quchen/">quchen</a> hielt einen Vortrag über STG und erklärte so, wie Haskell eigentlich ausgeführt wird. Wenn man Haskell programmiert, arbeitet man ja in einem platonischen Ideenhimmel, in dem auch unendliche und zirkuläre Datenstrukturen möglich und sinnvoll sind. Wie zum Tautomorphismus schafft es der Haskell-Compiler, aus einem abstrakten Haskell-Programm Maschinencode zu erzeugen, die der Computer tatsächlich ausführen kann?</p>
<p>Marc stellte die gefeierte Curry–Howard-Korrespondenz vor. Dernach sind Beweisen in der Mathematik und Programmieren in der Informatik zwei Seiten einer Medaille. Aus jedem Beweis kann man ein Programm extrahieren und jedes Programm beweist eine Behauptung.</p>
<p>Die Curry–Howard-Korrespondenz ist damit eine der drei Brücken des <a href="https://ncatlab.org/nlab/show/computational+trinitarianism">computational</a> <a href="https://existentialtype.wordpress.com/2011/03/27/the-holy-trinity/">trinitarianism</a>, einer Philosophie, die vielen Leuten sehr wichtig ist: Gleich sind nämlich nicht nur Beweisen und Programmieren, sondern auch noch Morphismen von Kategorien. Programme, Beweise und Morphismen in Kategorien sind alles verschiedene Seiten der selben (dreiseitigen) Medaille.</p>
<p>Im Rahmen des Vortrags gab es oder gab es nicht ein kurzes einstudiertes Schauspiel geben.</p>
<p>Außerdem haben wir nun verstanden, inwieweit die Benutzung von klassischer Logik Zeitreisen ähnelt. (Der Fachbegriff dazu ist <a href="https://en.wikipedia.org/wiki/Continuation">“Continuations”</a>.)</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Dritter großer Haskell-Workshop des Curry Clubs Augsburg am 17. Dezember 2016</title>
    <link href="http://curry-club-augsburg.de/posts/2016-12-06-dritter-workshop.html" />
    <id>http://curry-club-augsburg.de/posts/2016-12-06-dritter-workshop.html</id>
    <published>2016-12-06T00:00:00Z</published>
    <updated>2016-12-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Dritter großer Haskell-Workshop des Curry Clubs Augsburg am 17. Dezember 2016</h1>
    <div class="info">
      Gepostet am  6. Dez 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <div class="right">
<p><a href="/files/haskellworkshop-plakat3.pdf"> <img width="300" src="/files/haskellworkshop-plakat3.png" /> </a></p>
</div>
<p>Liebe Freundinnen der Sonne!</p>
<p>Wir, der Curry Club Augsburg, laden alle Interessierten herzlich zu der Fortsetzung unseres <strong>Haskell-Workshops</strong> ein. Diese findet am <strong>17. Dezember 2016</strong>, einem Samstag, von 9:00 Uhr bis 17:00 Uhr im <strong>OpenLab Augsburg</strong> statt. Wie bei den vorherigen Malen ist die Teilnahme kostenlos.</p>
<p>Zielgruppe des Workshops sind alle Teilnehmerinnen der ersten beiden Workshops sowie ganz besonders Einsteigerinnen auf allen Fortschrittslevels.</p>
<p>Mit den Teilnehmerinnen vom letzten Mal werden wir dort weitermachen, wo wir das letzte Mal aufgehört haben.</p>
<p>Für Neueinsteigerinnen wird es eine eigene Gruppe geben. Teilnahmevoraussetzung für Neulinge ist entweder Erfahrung mit einer beliebigen anderen Programmiersprache oder Vertrautheit mit mathematisch/abstraktem Denken.</p>
<p>Damit wir unsere Kapazität überblicken können, ist zur Teilnahme eine unverbindliche <a href="https://ola.pads.ccc.de/haskell-workshop-2016">vorherige Anmeldung</a> nötig. Zum Zeitpunkt des Schreibens sind nur noch drei Plätze frei.</p>
<p>Wir freuen uns auf euch!</p>
<p>Euer Team vom Curry Club</p>
<!--more-->
<blockquote>
<p>Was ist schneller als C++, prägnanter als Perl, regelmäßiger als Python, flexibler als Ruby, typisierter als C#, robuster als Java und hat absolut nichts mit PHP gemeinsam? Es ist Haskell!</p>
<p>Haskell ist eine moderne und innovative Programmiersprache, die sich von bekannten imperativen Sprachen in vielerlei Hinsicht deutlich unterscheidet: Ein Haskell-Programm besteht nicht etwa aus einer Abfolge von auszuführenden Anweisungen, sondern aus einer Ansammlung von Deklarationen, deren Reihenfolge keine Rolle spielt. Auch gibt es keine veränderlichen Variablen, und ausgewertet wird nur, was wirklich benötigt wird; unendliche Datenstrukturen sind möglich und sinnvoll.</p>
<p>Dieses Denkparadigma mag anfangs sehr ungewohnt sein, zieht jedoch eine Reihe von Vorteilen mit sich: Da es keine Nebenwirkungen wie beispielsweise globale Variablen gibt, kann man Code rein lokal verstehen. Damit wird es einfacher, modular Komponenten zusammenzubauen, sich Datenflüsse klarzumachen und Code auf seine Korrektheit hin zu überprüfen. Insbesondere vereinfacht sich die Programmierung mit Threads enorm.</p>
<p>Ferner ist Haskells starkes statisches Typsystem eine große Hilfe beim Programmieren und verhindert viel mehr Fehler schon während des Kompilierens, als man vielleicht aus anderen Sprachen gewohnt ist. Es gibt das Motto, dass, wenn Haskell-Code erst einmal erfolgreich durchkompiliere, er dann auch schon korrekt sei. Das ist sicherlich übertrieben, hat aber einen erstaunlich wahren Kern.</p>
<p>Beim Erlernen von Haskell lernt man viele neue Herangehensweisen kennen, die auch in anderen Sprachen nützlich sind; das ist einer der Hauptvorteile an Haskell, der auch dann noch relevant ist, wenn man aus verschiedenen Gründen im täglichen Leben nicht in Haskell programmieren möchte.</p>
</blockquote>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das einundzwanzigste Treffen am 1. Dezember 2016</title>
    <link href="http://curry-club-augsburg.de/posts/2016-11-06-einundzwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2016-11-06-einundzwanzigstes-treffen.html</id>
    <published>2016-11-06T00:00:00Z</published>
    <updated>2016-11-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das einundzwanzigste Treffen am 1. Dezember 2016</h1>
    <div class="info">
      Gepostet am  6. Nov 16
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Makarius gibt eine Einführung in die Grundlagen von klassischer Logik höherer Ordnung mit Hilberts Auswahloperator.</p>
<ul>
<li>History of Higher-Order Logic</li>
<li>Implementations of HOL</li>
<li>Quasi-programming in Isabelle/HOL</li>
<li>Isabelle foundations: primitive inferences, object-logic rules, rule composition, structured proofs Foundations of Higher-Order Logic: actual Isabelle/HOL, Pure bootstrap of HOL</li>
<li>Isabelle theory with some exercises (for Isabelle2016-1)</li>
</ul>
<p>Anschließend leitet Profpatsch eine gemeinsame Programmiersitzung an.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das zwanzigste Treffen am 3. November 2016</title>
    <link href="http://curry-club-augsburg.de/posts/2016-10-07-zwanzigstes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2016-10-07-zwanzigstes-treffen.html</id>
    <published>2016-10-07T00:00:00Z</published>
    <updated>2016-10-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das zwanzigste Treffen am 3. November 2016</h1>
    <div class="info">
      Gepostet am  7. Okt 16
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Ingo setzte seine Vorstellung von Superturingmaschinen und deren effektiven Topos <a href="/posts/2016-09-06-neunzehntes-treffen.html">vom letzten Treffen</a> fort (<a href="http://rawgit.com/iblech/mathezirkel-kurs/master/superturingmaschinen/slides.pdf">Folien</a>).</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/7QQ4Z8QwXUc" frameborder="0" allowfullscreen>
</iframe>
<p>Richard gab eine kurze Einführung in die Programmiersprache <a href="http://julialang.org/">Julia</a>.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/KUtNGWBt3hc" frameborder="0" allowfullscreen>
</iframe>
<p>Profpatsch gab, anlässlich des am folgenden Wochenende stattfindenden NixOS-Hackathons, einen kurzen Überblick über die funktionalen Grundlagen des Nix-Paketmanagers.</p>
<hr />
<p>Superturingmaschinen können anders als ihre bekannten Verwandten “länger als unendlich lange” laufen. Das drückt sich mathematisch dadurch aus, dass die Nummer des aktuellen Zeitschritts nicht mehr eine natürliche Zahl sein muss (Zeitschritt 0, Zeitschritt 1, …), sondern auch eine sog. unendliche Ordinalzahl sein kann (Zeitschritt ω, Zeitschritt ω+1, …).</p>
<p>Viele Probleme, die für gewöhnliche Turingmaschinen unlösbar sind, erledigen Superturingmaschinen mit Links: Zum Beispiel können Superturingmaschinen leicht zahlentheoretische Vermutungen überprüfen (einfach alle Zahlen durchgehen und nach einem Gegenbeispiel suchen; wenn nach unendlich vielen Schritten keines gefunden wurde, stimmt die Vermutung) oder entscheiden, ob eine gewöhnliche Turingmaschine anhält oder nicht.</p>
<p>Superturingmaschinen können aber trotzdem längst nicht “alles”. Es gibt Probleme, die auch Superturingmaschinen bewiesenermaßen nicht lösen können.</p>
<p>Der Vortrag wird in die Theorie der Superturingmaschinen einführen, welche in mancherlei Hinsicht parallel zur klassischen Theorie verläuft, sich in manchen Punkten aber auch deutlich von ihr unterscheidet. Wir werden unter anderem folgende Facetten diskutieren:</p>
<ul>
<li><p>Wie geht man präzise mit mehr als unendlich vielen Zeitschritten um? Wie kann man sich Superturingmaschinen physikalisch vorstellen? (Kurzer Crashkurs in Ordinalzahlen.)</p></li>
<li><p>Nach der kleinsten unendlich großen Ordinalzahl gibt es eine echte Klasse weiterer unendlich großer Ordinalzahlen. Gibt es zu jeder solchen Zahl eine Superturingmaschine, die nach genau so vielen Schritten hält?</p></li>
<li><p>Man schreibt Superturingmaschinen keine Maximalzahl zu verwendender Zeitschritte vor. Erstaunlicherweise gibt es trotzdem einen gewissen transfiniten Zeitpunkt, ab dem sich eine Superturingmaschine in ihrem Verhalten endlos wiederholen wird.</p></li>
<li><p>Wo liegen die Grenzen des Möglichen für Superturingmaschinen?</p></li>
<li><p>Manchmal kann man zwar ein gewisses Lied erkennen, wenn man es hört, es aber nicht vorsingen. Bei Superturingmaschinen gibt es dieses <em>Lost-Melody-Phänomen</em> ebenfalls: Sie können entscheiden, ob auf dem Band ein gewisser vorgegebener Inhalt steht, sind aber nicht in der Lage, diesen Inhalt selbst zu produzieren. Wieso?</p></li>
<li><p>Jedes Berechenbarkeitskonzept – wie etwa das von realen Computern in der realen Welt, das von idealisierten Turingmaschinen und das von Superturingmaschinen – zieht ein mathematisches Alternativuniversum mit jeweils eigenen Gesetzen der Logik mit sich, einen “effektiven Topos”. Insbesondere das Universum, welches zu Superturingmaschinen gehört, hat faszinierende Eigenschaften.</p></li>
</ul>
<p>Originalquellen zum Thema sind der wegweisende Artikel von Joel Hamkins und Andy Lewis <a href="http://arxiv.org/abs/math/9808093">Infinite Time Turing Machines</a> (Vorsicht Spoiler!) und zwei schöne Aufsätze von Andrej Bauer: <a href="http://math.andrej.com/wp-content/uploads/2014/03/real-world-realizability.pdf">Intuitionistic Mathematics and Realizability in the Physical World</a> und <a href="http://math.andrej.com/data/c2c.pdf">Realizability as the Connection between Computable and Constructive Mathematics</a>. Um den Vortrag genießen zu können, sollte man nur in seinem Leben irgendwann einmal gelernt haben, was eine Turingmaschine ist (das erste Drittel des Wikipedia-Eintrags genügt dazu völlig). Weitere Vorkenntnisse werden nicht vorausgesetzt.</p>
</article>
]]></summary>
</entry>
<entry>
    <title>Programm für das neunzehnte Treffen am 6. Oktober 2016</title>
    <link href="http://curry-club-augsburg.de/posts/2016-09-06-neunzehntes-treffen.html" />
    <id>http://curry-club-augsburg.de/posts/2016-09-06-neunzehntes-treffen.html</id>
    <published>2016-09-06T00:00:00Z</published>
    <updated>2016-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1>Programm für das neunzehnte Treffen am 6. Oktober 2016</h1>
    <div class="info">
      Gepostet am  6. Sep 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Profpatsch setzte seine Vorstellung einer pragmatischen Implementierung von Internationalisierung (i18n) in Haskell fort.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/0N5fiDPMA7Q" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo begann seine Einführung in Superturingmaschinen. Da er nicht fertig geworden ist, wird der Vortrag beim nächsten Treffen fortgesetzt.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/sUqwFbbwHQo" frameborder="0" allowfullscreen>
</iframe>
<p>Superturingmaschinen können anders als ihre bekannten Verwandten “länger als unendlich lange” laufen. Das drückt sich mathematisch dadurch aus, dass die Nummer des aktuellen Zeitschritts nicht mehr eine natürliche Zahl sein muss (Zeitschritt 0, Zeitschritt 1, …), sondern auch eine sog. unendliche Ordinalzahl sein kann (Zeitschritt ω, Zeitschritt ω+1, …).</p>
<p>Viele Probleme, die für gewöhnliche Turingmaschinen unlösbar sind, erledigen Superturingmaschinen mit Links: Zum Beispiel können Superturingmaschinen leicht zahlentheoretische Vermutungen überprüfen (einfach alle Zahlen durchgehen und nach einem Gegenbeispiel suchen; wenn nach unendlich vielen Schritten keines gefunden wurde, stimmt die Vermutung) oder entscheiden, ob eine gewöhnliche Turingmaschine anhält oder nicht.</p>
<p>Superturingmaschinen können aber trotzdem längst nicht “alles”. Es gibt Probleme, die auch Superturingmaschinen bewiesenermaßen nicht lösen können.</p>
<p>Der Vortrag wird in die Theorie der Superturingmaschinen einführen, welche in mancherlei Hinsicht parallel zur klassischen Theorie verläuft, sich in manchen Punkten aber auch deutlich von ihr unterscheidet. Wir werden unter anderem folgende Facetten diskutieren:</p>
<ul>
<li><p>Wie geht man präzise mit mehr als unendlich vielen Zeitschritten um? Wie kann man sich Superturingmaschinen physikalisch vorstellen? (Kurzer Crashkurs in Ordinalzahlen.)</p></li>
<li><p>Nach der kleinsten unendlich großen Ordinalzahl gibt es eine echte Klasse weiterer unendlich großer Ordinalzahlen. Gibt es zu jeder solchen Zahl eine Superturingmaschine, die nach genau so vielen Schritten hält?</p></li>
<li><p>Man schreibt Superturingmaschinen keine Maximalzahl zu verwendender Zeitschritte vor. Erstaunlicherweise gibt es trotzdem einen gewissen transfiniten Zeitpunkt, ab dem sich eine Superturingmaschine in ihrem Verhalten endlos wiederholen wird.</p></li>
<li><p>Wo liegen die Grenzen des Möglichen für Superturingmaschinen?</p></li>
<li><p>Manchmal kann man zwar ein gewisses Lied erkennen, wenn man es hört, es aber nicht vorsingen. Bei Superturingmaschinen gibt es dieses <em>Lost-Melody-Phänomen</em> ebenfalls: Sie können entscheiden, ob auf dem Band ein gewisser vorgegebener Inhalt steht, sind aber nicht in der Lage, diesen Inhalt selbst zu produzieren. Wieso?</p></li>
<li><p>Jedes Berechenbarkeitskonzept – wie etwa das von realen Computern in der realen Welt, das von idealisierten Turingmaschinen und das von Superturingmaschinen – zieht ein mathematisches Alternativuniversum mit jeweils eigenen Gesetzen der Logik mit sich, einen “effektiven Topos”. Insbesondere das Universum, welches zu Superturingmaschinen gehört, hat faszinierende Eigenschaften.</p></li>
</ul>
<p>Originalquellen zum Thema sind der wegweisende Artikel von Joel Hamkins und Andy Lewis <a href="http://arxiv.org/abs/math/9808093">Infinite Time Turing Machines</a> (Vorsicht Spoiler!) und zwei schöne Aufsätze von Andrej Bauer: <a href="http://math.andrej.com/wp-content/uploads/2014/03/real-world-realizability.pdf">Intuitionistic Mathematics and Realizability in the Physical World</a> und <a href="http://math.andrej.com/data/c2c.pdf">Realizability as the Connection between Computable and Constructive Mathematics</a>. Um den Vortrag genießen zu können, sollte man nur in seinem Leben irgendwann einmal gelernt haben, was eine Turingmaschine ist (das erste Drittel des Wikipedia-Eintrags genügt dazu völlig). Weitere Vorkenntnisse werden nicht vorausgesetzt.</p>
</article>
]]></summary>
</entry>

</feed>
