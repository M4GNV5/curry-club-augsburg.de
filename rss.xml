<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Curry Club Augsburg</title>
        <link>http://curry-club-augsburg.de</link>
        <description><![CDATA[Neuigkeiten vom Curry Club Augsburg]]></description>
        <atom:link href="http://curry-club-augsburg.de/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 11 Oct 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Programm für das zweiunddreißigste Treffen am 2. November 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-10-11-zweiunddreissigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das zweiunddreißigste Treffen am 2. November 2017</h1>
    <div class="info">
      Gepostet am 11. Okt 17
      
          von uwap
      
    </div>
    
    
  </header>

  <p>Ingo wird mit uns auf höchstens 30 Minuten die bei den <a href="2017-09-07-dreissigstes-treffen.html">letzten</a> <a href="2017-10-05-einunddreissigstes-treffen.md">beiden</a> Treffen begonnene Reise durch wundersame Phänomene der Logik abschließen. Wir werden über Programme sprechen, die je nachdem, in welchem mathematischen Alternativuniversum sie ausgeführt werden, ein anderes Verhalten an den Tag legen, und einen Rosetta-Stein kennenlernen, der Berechenbarkeitstheorie mit Logik und Zahlentheorie verwebt. Abschließend werden wir noch ein verblüffendes Beispiel dafür sehen, dass Zufall als wertvolle Ressource gehandelt werden muss.</p>
<p>Tim begab sich die letzten Wochen auf die Spuren von Makarius und entwickelte seinen eigenen kleinen Theorembeweiser, angetrieben von dem Wunsch, die Übungsblätter der aktuell laufenden Kategorientheorievorlesung von Marc und Matthias formalisiert abgeben zu können. Tim wird in seinem Vortrag die Architektur seines Systems und die Erfahrungen, die er bei der Entwicklung machte, vorstellen.</p>
<p>Vielleicht holt außerdem marudor seinen schon zum letzten Treffen angekündigten Vortrag über typisiertes JavaScript nach.</p>
</article>
]]></description>
    <pubDate>Wed, 11 Oct 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-10-11-zweiunddreissigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das einunddreißigste Treffen am 5. Oktober 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-10-05-einunddreissigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das einunddreißigste Treffen am 5. Oktober 2017</h1>
    <div class="info">
      Gepostet am  5. Okt 17
      
          von uwap
      
    </div>
    
    
  </header>

  <p>Der angekündigte Vortrag marudor zu typisiertem JavaScript musste leider krankheitsbedingt entfallen.</p>
<p>Ingo setzte mit uns die beim <a href="2017-09-07-dreissigstes-treffen.html">letzten Treffen begonnene</a> Reise durch wundersame Phänomene der Logik fort.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/S9x181N8k_U" frameborder="0" allowfullscreen>
</iframe>
<p>Richi sprach über Buffer Overflows, Arbitrary Code Execution und Format String Exploits.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/_moCOMcjkJs" frameborder="0" allowfullscreen>
</iframe>
<p>Marc erklärte SSA: Die meisten modernen Compiler für konventionelle Programmiersprachen (GCC, Clang, SpiderMonkey, …) schreiben das Programm für ihr Middle-End in “Singe-Static-Assignment-Form” um, in der es dann optimiert wird, bevor die SSA-Form im Back-End dann in Maschinensprache umgeschrieben wird. Jeder Compiler-Bauer muß also wissen, was SSA bedeutet. Wir geben kurz an, um was es sich bei der SSA-Form handelt, und was das Ganze mit funktionaler Programmierung zu tun hat (woraus sich im Übrigen auch der Grund für den Vorteil der SSA-Form ergibt.)</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/iSLIclOTPE4" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Thu, 05 Oct 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-10-05-einunddreissigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das dreißigste Treffen am 7. September 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-09-07-dreissigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das dreißigste Treffen am 7. September 2017</h1>
    <div class="info">
      Gepostet am  7. Sep 17
      
          von uwap
      
    </div>
    
    
  </header>

  <p>Marc trug über <em>Tail Calls, Proper Tail Recursion, Continuations, CPS-Transformation, Call/CC und Continuation Marks</em> vor. Bei einem späteren Treffen könnte noch die <em>Korrekte Implementierung von Lazy Evaluation in Programmiersprachen mit Strict Evaluation</em> diskutiert werden.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/iuaM9-PX1ls?rel=0" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo stellte uns eine <em>düstere Ecke der Logik</em> vor, Gödels gefeierten Unvollständigkeitssatz, der aussagt: Es gibt Aussagen, die wahr, aber nicht beweisbar sind. Auf den ersten Blick klingt das paradox – denn wie können wir schon von einer Aussage zweifelsfrei wissen, dass sie wahr ist, wenn nicht durch einen Beweis? Ingo präsentierte die Auflösung dieses Scheinwiderspruchs.</p>
<p>Unsere kurze Reise durch wundersame Phänomene der Logik wird beim <a href="2017-10-05-einunddreissigstes-treffen.html">nächsten Treffen</a> fortgesetzt.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/gFioK87z8dE?rel=0" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Thu, 07 Sep 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-09-07-dreissigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das neunundzwanzigste Treffen am 10. August 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-08-10-neunundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das neunundzwanzigste Treffen am 10. August 2017</h1>
    <div class="info">
      Gepostet am 10. Aug 17
      
          von Profpatsch
      
    </div>
    
    
  </header>

  <p>Makarius berichtet über sein <a href="https://marketplace.visualstudio.com/items?itemName=makarius.isabelle">laufendes Projekt</a>, Visual Studio Code als Isabelle/PIDE-Frontend zu verwenden.</p>
<p>Profpatsch stellt <a href="https://hackage.haskell.org/package/turtle">Turtle</a> vor, eine Haskell-Bibliothek, mit der man Haskell als “bessere Bash” verwenden kann. Das fängt bei der Überwindung der Quotinghölle an und geht dann noch viel weiter.</p>
</article>
]]></description>
    <pubDate>Thu, 10 Aug 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-08-10-neunundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das achtundzwanzigste Treffen am 13. Juli 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-07-04-achtundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das achtundzwanzigste Treffen am 13. Juli 2017</h1>
    <div class="info">
      Gepostet am  4. Jul 17
      
          von Tim Baumann, Profpatsch
      
    </div>
    
    
  </header>

  <p>Wir trafen uns diesmal recht unvorbereitet und sprachen ein bisschen über <code>recursion schemes</code>, wie <a href="https://hackage.haskell.org/package/data-fix-0.0.4/docs/Data-Fix.html">Fix</a> verwendet werden kann, was denn ein <a href="https://hackage.haskell.org/package/data-fix-0.0.4/docs/Data-Fix.html#v:hylo">Hylomorphismus</a> und ein <a href="https://hackage.haskell.org/package/data-fix-0.0.4/docs/Data-Fix.html#v:ana">Anamorphismus</a> ist und wie Edward Kmett das in seinem <a href="https://hackage.haskell.org/package/recursion-schemes-5.0.1/docs/Data-Functor-Foldable.html"><code>recursion-schemes</code></a>-Paket auf die Spitze treibt.</p>
</article>
]]></description>
    <pubDate>Tue, 04 Jul 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-07-04-achtundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das siebenundzwanzigste Treffen am 15. Juni 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-06-08-siebenundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das siebenundzwanzigste Treffen am 15. Juni 2017</h1>
    <div class="info">
      Gepostet am  8. Jun 17
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Xaver stellt hfish vor, seine in Haskell geschriebene Shell, die mit diversen Altlasten herkömmlicher Shells aufräumt.</p>
<p>Ingo improvisierte etwas zu folgender Problemstellung: Gegeben seien zwei unendliche Listen natürlicher Zahlen, <code>as</code> und <code>bs</code>. Dann gibt es immer ein Paar <code>(i,j)</code> von Indizes mit <code>i &lt; j</code>, sodass <code>as!!i &lt;= as!!j</code> und <code>bs!!i &lt;= bs!!j</code>.</p>
<p>Das ist gar nicht klar! Wie findet man ein solches Paar? Ein eleganter klassischer Beweis der Existenz gibt dazu kaum Aufschluss, denn als Hilfsschritt bestimmt er das Minimum einer unendlichen Liste. Man kann nun auf clevere Art und Weise die Continuationmonade einsetzen, um diese eigentlich in der Praxis unlösbar scheinende Aufgaben lösbar erscheinen zu lassen.</p>
</article>
]]></description>
    <pubDate>Thu, 08 Jun 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-06-08-siebenundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das sechsundzwanzigste Treffen am 18. Mai 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-04-21-sechsundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das sechsundzwanzigste Treffen am 18. Mai 2017</h1>
    <div class="info">
      Gepostet am 21. Apr 17
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Tim stellte <em>Theoreme für lau</em> (<em>Theorems for free</em>) vor (<a href="http://timbaumann.info/presentations/cca-theoreme-fuer-lau/theoreme-fuer-lau.pdf">Folien</a>).</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/2_6SdMgxI-s?list=PLwpepnYDFK9PHluFPG7fBWXycuf8eWHYX" frameborder="0" allowfullscreen>
</iframe>
<p>Corny <em>baute einen Linux-Container in Rust in &lt;200LoC</em>. Es war low-level, es war dreckig, alles war unsafe{}, nichts war sicher und wir vergruben unsere Köpfe im Linux-Kernel.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/nVIHgu7A_4A?list=PLwpepnYDFK9PHluFPG7fBWXycuf8eWHYX" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Fri, 21 Apr 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-04-21-sechsundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das fünfundzwanzigste Treffen am 20. April 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-03-23-f%C3%BCnfundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das fünfundzwanzigste Treffen am 20. April 2017</h1>
    <div class="info">
      Gepostet am 23. Mär 17
      
          von Matthias Hutzler
      
    </div>
    
    
  </header>

  <p>Manuel hielt einen Vortrag mit dem Titel <em>Kenn dein Limit</em>. Es ging darum, Grenzwerte von reellen Funktionen zu berechnen – und zwar (halb-)automatisch und verifiziert in Isabelle.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/DCb3NT1GDo8?list=PLwpepnYDFK9Mj6zO-ug2DzM03TOSUqz22" frameborder="0" allowfullscreen>
</iframe>
<p>Matthias hielt einen “Kurzvortrag” zu 4d-Grafik mit Haskell, OpenGL und dem <a href="https://hackage.haskell.org/package/linear">linear</a>-Paket. Mit “4d-Grafik” ist dabei nicht “besonders gute 3d-Grafik” oder “3d-Grafik + Gerüche + dein Sitz bewegt sich” gemeint, sondern: (bewegte) Bilder von vierdimensionalen geometrischen Objekten.</p>
<p>Code: https://github.com/MatthiasHu/4d-labyrinth</p>
<p>4d-Vortrag auf dem 33c3 (englisch): https://youtu.be/ct0_g1amEpw</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/WzBhboEIkSE?list=PLwpepnYDFK9Mj6zO-ug2DzM03TOSUqz22" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Thu, 23 Mar 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-03-23-f%C3%BCnfundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das vierundzwanzigste Treffen am 23. März 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-02-23-vierundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das vierundzwanzigste Treffen am 23. März 2017</h1>
    <div class="info">
      Gepostet am 23. Feb 17
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Uwap wird eine Einführung in lineare Logik und lineare Typsysteme geben. Klassische und intuitionistische Logik verfolgt das Ziel schlussfolgerungen zu ermöglichen. Was aber nun, wenn ich nicht eine Wahrheit A und eine Wahrheit B habe, sondern eine Ressource A und eine Ressource B? Wir werden sehen, dass wir so an unendlich Bonbons kommen können und wie uns Lollis dabei helfen es besser zu machen.</p>
<p>Daniel stellt Rust vor.</p>
</article>
]]></description>
    <pubDate>Thu, 23 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-02-23-vierundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Vierter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Januar 2017</title>
    <link>http://curry-club-augsburg.de/posts/2017-01-03-vierter-workshop.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Vierter großer Haskell-Workshop des Curry Clubs Augsburg am 21. Januar 2017</h1>
    <div class="info">
      Gepostet am  3. Jan 17
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <div class="right">
<p><a href="/files/haskellworkshop-plakat3.pdf"> <img width="300" src="/files/haskellworkshop-plakat3.png" /> </a></p>
</div>
<p>Liebe Freundinnen der Sonne!</p>
<p>Wir, der Curry Club Augsburg, laden alle Interessierten herzlich zu der Fortsetzung unseres <strong>Haskell-Workshops</strong> ein. Diese findet am <strong>21. Januar 2017</strong>, einem Samstag, von 9:00 Uhr bis 17:00 Uhr im <strong>OpenLab Augsburg</strong> statt. Wie bei den vorherigen Malen ist die Teilnahme kostenlos.</p>
<p>Zielgruppe des Workshops sind alle Teilnehmerinnen der ersten drei Workshops. Etwas genauer: Man sollte in der Lage sein, ein Haskell-Programm zu schreiben, dass die Anzahl Blätter eines binären Baums zählt. Diese Aufgabe darf ruhig ein wenig dauern! Der Workshop richtet sich an alle, die keine Neulinge mehr sind; Expertin muss man aber noch lange nicht sein. Ganz besonders möchten wir die Teilnehmenden des dritten Workshops vom 17. Dezember 2016 ermuntern, an diesem Folgeworkshop teilzunehmen.</p>
<p>Wichtigster Programmpunkt beim Folgeworkshop sind Monaden (griechisch für “putzige flauschige Dinge”). Damit könnt ihr Ein- und Ausgabe betreiben, den Programmfluss pervers verbiegen, veränderliche Variablen bedienen (wenn es unbedingt sein muss), Dateiformate parsen, Logikrätsel lösen und Spiele programmieren. Außerdem werden wir über QuickCheck sprechen, einer sehr beliebten Möglichkeit, um die paar Programmierfehler, die das Typsystem nicht findet, zu fangen.</p>
<p>Damit wir unsere Kapazität überblicken können, ist zur Teilnahme eine verpflichtende aber unverbindliche <a href="https://ola.pads.ccc.de/haskell-workshop-2017a">vorherige Anmeldung</a> nötig.</p>
<p>Wir freuen uns auf euch!</p>
<p>Euer Team vom Curry Club</p>
<!--more-->
<blockquote>
<p>Was ist schneller als C++, prägnanter als Perl, regelmäßiger als Python, flexibler als Ruby, typisierter als C#, robuster als Java und hat absolut nichts mit PHP gemeinsam? Es ist Haskell!</p>
<p>Haskell ist eine moderne und innovative Programmiersprache, die sich von bekannten imperativen Sprachen in vielerlei Hinsicht deutlich unterscheidet: Ein Haskell-Programm besteht nicht etwa aus einer Abfolge von auszuführenden Anweisungen, sondern aus einer Ansammlung von Deklarationen, deren Reihenfolge keine Rolle spielt. Auch gibt es keine veränderlichen Variablen, und ausgewertet wird nur, was wirklich benötigt wird; unendliche Datenstrukturen sind möglich und sinnvoll.</p>
<p>Dieses Denkparadigma mag anfangs sehr ungewohnt sein, zieht jedoch eine Reihe von Vorteilen mit sich: Da es keine Nebenwirkungen wie beispielsweise globale Variablen gibt, kann man Code rein lokal verstehen. Damit wird es einfacher, modular Komponenten zusammenzubauen, sich Datenflüsse klarzumachen und Code auf seine Korrektheit hin zu überprüfen. Insbesondere vereinfacht sich die Programmierung mit Threads enorm.</p>
<p>Ferner ist Haskells starkes statisches Typsystem eine große Hilfe beim Programmieren und verhindert viel mehr Fehler schon während des Kompilierens, als man vielleicht aus anderen Sprachen gewohnt ist. Es gibt das Motto, dass, wenn Haskell-Code erst einmal erfolgreich durchkompiliere, er dann auch schon korrekt sei. Das ist sicherlich übertrieben, hat aber einen erstaunlich wahren Kern.</p>
<p>Beim Erlernen von Haskell lernt man viele neue Herangehensweisen kennen, die auch in anderen Sprachen nützlich sind; das ist einer der Hauptvorteile an Haskell, der auch dann noch relevant ist, wenn man aus verschiedenen Gründen im täglichen Leben nicht in Haskell programmieren möchte.</p>
</blockquote>
</article>
]]></description>
    <pubDate>Tue, 03 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2017-01-03-vierter-workshop.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>

    </channel>
</rss>
