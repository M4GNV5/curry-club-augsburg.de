<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Curry Club Augsburg</title>
        <link>http://curry-club-augsburg.de</link>
        <description><![CDATA[Neuigkeiten vom Curry Club Augsburg]]></description>
        <atom:link href="http://curry-club-augsburg.de/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 19 Dec 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Programm für das einundzwanzigste Treffen am 26. Januar 2017</title>
    <link>http://curry-club-augsburg.de/posts/2016-12-19-zweiundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das einundzwanzigste Treffen am 26. Januar 2017</h1>
    <div class="info">
      Gepostet am 19. Dez 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Daniel gibt eine Einführung in Rust, Marc erklärt die Curry–Howard-Korrespondenz (vermöge der Beweisen und Programmieren dasselbe sind) und anschließend leitet Profpatsch eine gemeinsame Programmiersitzung an.</p>
</article>
]]></description>
    <pubDate>Mon, 19 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-12-19-zweiundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Dritter großer Haskell-Workshop des Curry Clubs Augsburg am 17. Dezember 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-12-06-dritter-workshop.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Dritter großer Haskell-Workshop des Curry Clubs Augsburg am 17. Dezember 2016</h1>
    <div class="info">
      Gepostet am  6. Dez 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <div class="right">
<p><a href="/files/haskellworkshop-plakat3.pdf"> <img width="300" src="/files/haskellworkshop-plakat3.png" /> </a></p>
</div>
<p>Liebe Freundinnen der Sonne!</p>
<p>Wir, der Curry Club Augsburg, laden alle Interessierten herzlich zu der Fortsetzung unseres <strong>Haskell-Workshops</strong> ein. Diese findet am <strong>17. Dezember 2016</strong>, einem Samstag, von 9:00 Uhr bis 17:00 Uhr im <strong>OpenLab Augsburg</strong> statt. Wie bei den vorherigen Malen ist die Teilnahme kostenlos.</p>
<p>Zielgruppe des Workshops sind alle Teilnehmerinnen der ersten beiden Workshops sowie ganz besonders Einsteigerinnen auf allen Fortschrittslevels.</p>
<p>Mit den Teilnehmerinnen vom letzten Mal werden wir dort weitermachen, wo wir das letzte Mal aufgehört haben.</p>
<p>Für Neueinsteigerinnen wird es eine eigene Gruppe geben. Teilnahmevoraussetzung für Neulinge ist entweder Erfahrung mit einer beliebigen anderen Programmiersprache oder Vertrautheit mit mathematisch/abstraktem Denken.</p>
<p>Damit wir unsere Kapazität überblicken können, ist zur Teilnahme eine unverbindliche <a href="https://ola.pads.ccc.de/haskell-workshop-2016">vorherige Anmeldung</a> nötig. Zum Zeitpunkt des Schreibens sind nur noch drei Plätze frei.</p>
<p>Wir freuen uns auf euch!</p>
<p>Euer Team vom Curry Club</p>
<!--more-->
<blockquote>
<p>Was ist schneller als C++, prägnanter als Perl, regelmäßiger als Python, flexibler als Ruby, typisierter als C#, robuster als Java und hat absolut nichts mit PHP gemeinsam? Es ist Haskell!</p>
<p>Haskell ist eine moderne und innovative Programmiersprache, die sich von bekannten imperativen Sprachen in vielerlei Hinsicht deutlich unterscheidet: Ein Haskell-Programm besteht nicht etwa aus einer Abfolge von auszuführenden Anweisungen, sondern aus einer Ansammlung von Deklarationen, deren Reihenfolge keine Rolle spielt. Auch gibt es keine veränderlichen Variablen, und ausgewertet wird nur, was wirklich benötigt wird; unendliche Datenstrukturen sind möglich und sinnvoll.</p>
<p>Dieses Denkparadigma mag anfangs sehr ungewohnt sein, zieht jedoch eine Reihe von Vorteilen mit sich: Da es keine Nebenwirkungen wie beispielsweise globale Variablen gibt, kann man Code rein lokal verstehen. Damit wird es einfacher, modular Komponenten zusammenzubauen, sich Datenflüsse klarzumachen und Code auf seine Korrektheit hin zu überprüfen. Insbesondere vereinfacht sich die Programmierung mit Threads enorm.</p>
<p>Ferner ist Haskells starkes statisches Typsystem eine große Hilfe beim Programmieren und verhindert viel mehr Fehler schon während des Kompilierens, als man vielleicht aus anderen Sprachen gewohnt ist. Es gibt das Motto, dass, wenn Haskell-Code erst einmal erfolgreich durchkompiliere, er dann auch schon korrekt sei. Das ist sicherlich übertrieben, hat aber einen erstaunlich wahren Kern.</p>
<p>Beim Erlernen von Haskell lernt man viele neue Herangehensweisen kennen, die auch in anderen Sprachen nützlich sind; das ist einer der Hauptvorteile an Haskell, der auch dann noch relevant ist, wenn man aus verschiedenen Gründen im täglichen Leben nicht in Haskell programmieren möchte.</p>
</blockquote>
</article>
]]></description>
    <pubDate>Tue, 06 Dec 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-12-06-dritter-workshop.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das einundzwanzigste Treffen am 1. Dezember 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-11-06-einundzwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das einundzwanzigste Treffen am 1. Dezember 2016</h1>
    <div class="info">
      Gepostet am  6. Nov 16
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Makarius gibt eine Einführung in die Grundlagen von klassischer Logik höherer Ordnung mit Hilberts Auswahloperator.</p>
<ul>
<li>History of Higher-Order Logic</li>
<li>Implementations of HOL</li>
<li>Quasi-programming in Isabelle/HOL</li>
<li>Isabelle foundations: primitive inferences, object-logic rules, rule composition, structured proofs Foundations of Higher-Order Logic: actual Isabelle/HOL, Pure bootstrap of HOL</li>
<li>Isabelle theory with some exercises (for Isabelle2016-1)</li>
</ul>
<p>Anschließend leitet Profpatsch eine gemeinsame Programmiersitzung an.</p>
</article>
]]></description>
    <pubDate>Sun, 06 Nov 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-11-06-einundzwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das zwanzigste Treffen am 3. November 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-10-07-zwanzigstes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das zwanzigste Treffen am 3. November 2016</h1>
    <div class="info">
      Gepostet am  7. Okt 16
      
          von Tim Baumann
      
    </div>
    
    
  </header>

  <p>Ingo setzte seine Vorstellung von Superturingmaschinen und deren effektiven Topos <a href="/posts/2016-09-06-neunzehntes-treffen.html">vom letzten Treffen</a> fort (<a href="http://rawgit.com/iblech/mathezirkel-kurs/master/superturingmaschinen/slides.pdf">Folien</a>).</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/7QQ4Z8QwXUc" frameborder="0" allowfullscreen>
</iframe>
<p>Richard gab eine kurze Einführung in die Programmiersprache <a href="http://julialang.org/">Julia</a>.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/KUtNGWBt3hc" frameborder="0" allowfullscreen>
</iframe>
<p>Profpatsch gab, anlässlich des am folgenden Wochenende stattfindenden NixOS-Hackathons, einen kurzen Überblick über die funktionalen Grundlagen des Nix-Paketmanagers.</p>
<hr />
<p>Superturingmaschinen können anders als ihre bekannten Verwandten “länger als unendlich lange” laufen. Das drückt sich mathematisch dadurch aus, dass die Nummer des aktuellen Zeitschritts nicht mehr eine natürliche Zahl sein muss (Zeitschritt 0, Zeitschritt 1, …), sondern auch eine sog. unendliche Ordinalzahl sein kann (Zeitschritt ω, Zeitschritt ω+1, …).</p>
<p>Viele Probleme, die für gewöhnliche Turingmaschinen unlösbar sind, erledigen Superturingmaschinen mit Links: Zum Beispiel können Superturingmaschinen leicht zahlentheoretische Vermutungen überprüfen (einfach alle Zahlen durchgehen und nach einem Gegenbeispiel suchen; wenn nach unendlich vielen Schritten keines gefunden wurde, stimmt die Vermutung) oder entscheiden, ob eine gewöhnliche Turingmaschine anhält oder nicht.</p>
<p>Superturingmaschinen können aber trotzdem längst nicht “alles”. Es gibt Probleme, die auch Superturingmaschinen bewiesenermaßen nicht lösen können.</p>
<p>Der Vortrag wird in die Theorie der Superturingmaschinen einführen, welche in mancherlei Hinsicht parallel zur klassischen Theorie verläuft, sich in manchen Punkten aber auch deutlich von ihr unterscheidet. Wir werden unter anderem folgende Facetten diskutieren:</p>
<ul>
<li><p>Wie geht man präzise mit mehr als unendlich vielen Zeitschritten um? Wie kann man sich Superturingmaschinen physikalisch vorstellen? (Kurzer Crashkurs in Ordinalzahlen.)</p></li>
<li><p>Nach der kleinsten unendlich großen Ordinalzahl gibt es eine echte Klasse weiterer unendlich großer Ordinalzahlen. Gibt es zu jeder solchen Zahl eine Superturingmaschine, die nach genau so vielen Schritten hält?</p></li>
<li><p>Man schreibt Superturingmaschinen keine Maximalzahl zu verwendender Zeitschritte vor. Erstaunlicherweise gibt es trotzdem einen gewissen transfiniten Zeitpunkt, ab dem sich eine Superturingmaschine in ihrem Verhalten endlos wiederholen wird.</p></li>
<li><p>Wo liegen die Grenzen des Möglichen für Superturingmaschinen?</p></li>
<li><p>Manchmal kann man zwar ein gewisses Lied erkennen, wenn man es hört, es aber nicht vorsingen. Bei Superturingmaschinen gibt es dieses <em>Lost-Melody-Phänomen</em> ebenfalls: Sie können entscheiden, ob auf dem Band ein gewisser vorgegebener Inhalt steht, sind aber nicht in der Lage, diesen Inhalt selbst zu produzieren. Wieso?</p></li>
<li><p>Jedes Berechenbarkeitskonzept – wie etwa das von realen Computern in der realen Welt, das von idealisierten Turingmaschinen und das von Superturingmaschinen – zieht ein mathematisches Alternativuniversum mit jeweils eigenen Gesetzen der Logik mit sich, einen “effektiven Topos”. Insbesondere das Universum, welches zu Superturingmaschinen gehört, hat faszinierende Eigenschaften.</p></li>
</ul>
<p>Originalquellen zum Thema sind der wegweisende Artikel von Joel Hamkins und Andy Lewis <a href="http://arxiv.org/abs/math/9808093">Infinite Time Turing Machines</a> (Vorsicht Spoiler!) und zwei schöne Aufsätze von Andrej Bauer: <a href="http://math.andrej.com/wp-content/uploads/2014/03/real-world-realizability.pdf">Intuitionistic Mathematics and Realizability in the Physical World</a> und <a href="http://math.andrej.com/data/c2c.pdf">Realizability as the Connection between Computable and Constructive Mathematics</a>. Um den Vortrag genießen zu können, sollte man nur in seinem Leben irgendwann einmal gelernt haben, was eine Turingmaschine ist (das erste Drittel des Wikipedia-Eintrags genügt dazu völlig). Weitere Vorkenntnisse werden nicht vorausgesetzt.</p>
</article>
]]></description>
    <pubDate>Fri, 07 Oct 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-10-07-zwanzigstes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das neunzehnte Treffen am 6. Oktober 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-09-06-neunzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das neunzehnte Treffen am 6. Oktober 2016</h1>
    <div class="info">
      Gepostet am  6. Sep 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Profpatsch setzte seine Vorstellung einer pragmatischen Implementierung von Internationalisierung (i18n) in Haskell fort.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/0N5fiDPMA7Q" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo begann seine Einführung in Superturingmaschinen. Da er nicht fertig geworden ist, wird der Vortrag beim nächsten Treffen fortgesetzt.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/sUqwFbbwHQo" frameborder="0" allowfullscreen>
</iframe>
<p>Superturingmaschinen können anders als ihre bekannten Verwandten “länger als unendlich lange” laufen. Das drückt sich mathematisch dadurch aus, dass die Nummer des aktuellen Zeitschritts nicht mehr eine natürliche Zahl sein muss (Zeitschritt 0, Zeitschritt 1, …), sondern auch eine sog. unendliche Ordinalzahl sein kann (Zeitschritt ω, Zeitschritt ω+1, …).</p>
<p>Viele Probleme, die für gewöhnliche Turingmaschinen unlösbar sind, erledigen Superturingmaschinen mit Links: Zum Beispiel können Superturingmaschinen leicht zahlentheoretische Vermutungen überprüfen (einfach alle Zahlen durchgehen und nach einem Gegenbeispiel suchen; wenn nach unendlich vielen Schritten keines gefunden wurde, stimmt die Vermutung) oder entscheiden, ob eine gewöhnliche Turingmaschine anhält oder nicht.</p>
<p>Superturingmaschinen können aber trotzdem längst nicht “alles”. Es gibt Probleme, die auch Superturingmaschinen bewiesenermaßen nicht lösen können.</p>
<p>Der Vortrag wird in die Theorie der Superturingmaschinen einführen, welche in mancherlei Hinsicht parallel zur klassischen Theorie verläuft, sich in manchen Punkten aber auch deutlich von ihr unterscheidet. Wir werden unter anderem folgende Facetten diskutieren:</p>
<ul>
<li><p>Wie geht man präzise mit mehr als unendlich vielen Zeitschritten um? Wie kann man sich Superturingmaschinen physikalisch vorstellen? (Kurzer Crashkurs in Ordinalzahlen.)</p></li>
<li><p>Nach der kleinsten unendlich großen Ordinalzahl gibt es eine echte Klasse weiterer unendlich großer Ordinalzahlen. Gibt es zu jeder solchen Zahl eine Superturingmaschine, die nach genau so vielen Schritten hält?</p></li>
<li><p>Man schreibt Superturingmaschinen keine Maximalzahl zu verwendender Zeitschritte vor. Erstaunlicherweise gibt es trotzdem einen gewissen transfiniten Zeitpunkt, ab dem sich eine Superturingmaschine in ihrem Verhalten endlos wiederholen wird.</p></li>
<li><p>Wo liegen die Grenzen des Möglichen für Superturingmaschinen?</p></li>
<li><p>Manchmal kann man zwar ein gewisses Lied erkennen, wenn man es hört, es aber nicht vorsingen. Bei Superturingmaschinen gibt es dieses <em>Lost-Melody-Phänomen</em> ebenfalls: Sie können entscheiden, ob auf dem Band ein gewisser vorgegebener Inhalt steht, sind aber nicht in der Lage, diesen Inhalt selbst zu produzieren. Wieso?</p></li>
<li><p>Jedes Berechenbarkeitskonzept – wie etwa das von realen Computern in der realen Welt, das von idealisierten Turingmaschinen und das von Superturingmaschinen – zieht ein mathematisches Alternativuniversum mit jeweils eigenen Gesetzen der Logik mit sich, einen “effektiven Topos”. Insbesondere das Universum, welches zu Superturingmaschinen gehört, hat faszinierende Eigenschaften.</p></li>
</ul>
<p>Originalquellen zum Thema sind der wegweisende Artikel von Joel Hamkins und Andy Lewis <a href="http://arxiv.org/abs/math/9808093">Infinite Time Turing Machines</a> (Vorsicht Spoiler!) und zwei schöne Aufsätze von Andrej Bauer: <a href="http://math.andrej.com/wp-content/uploads/2014/03/real-world-realizability.pdf">Intuitionistic Mathematics and Realizability in the Physical World</a> und <a href="http://math.andrej.com/data/c2c.pdf">Realizability as the Connection between Computable and Constructive Mathematics</a>. Um den Vortrag genießen zu können, sollte man nur in seinem Leben irgendwann einmal gelernt haben, was eine Turingmaschine ist (das erste Drittel des Wikipedia-Eintrags genügt dazu völlig). Weitere Vorkenntnisse werden nicht vorausgesetzt.</p>
</article>
]]></description>
    <pubDate>Tue, 06 Sep 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-09-06-neunzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das siebzehnte Treffen am 11. August 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-06-29-siebzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das siebzehnte Treffen am 11. August 2016</h1>
    <div class="info">
      Gepostet am 29. Jun 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>uwap stellte Idris als “general purpose”-Sprache vor, in der man abhängige Typen praktisch verwenden kann.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/DhznnY59Lu4" frameborder="0" allowfullscreen>
</iframe>
<p>Tim hielt spontan einen Vortrag über <a href="https://github.com/timjb/quantities">quantities</a>, eine von ihm geschriebene Idris-Bibliothek zum Rechnen mit physikalischen Einheiten.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/PrNVF2tWaVs" frameborder="0" allowfullscreen>
</iframe>
<p>Tim hielt einen Vortrag zu Versionskontrollsystemen und Patch-Theorie. Er stellte die unterschiedlichen Modelle von git und darcs vor. Eigentlich wollte er noch insbesondere auf das neue Versionskontrollsystem <a href="http://pijul.org/">Pijul</a> eingehen, welches aufgebaut ist auf (oder ist laut Webseite “inspiriert ist von”) einer kategorientheoretischen <a href="http://www.lix.polytechnique.fr/Labo/Samuel.Mimram/docs/mimram_ctp.pdf">Theorie von</a> <a href="http://www.lix.polytechnique.fr/Labo/Samuel.Mimram/docs/mimram_ctp_slides.pdf">Patches</a> von Samuel Mimram und Cinzia Di Giusto. Tim musste aber leider kurz vor dem Vortrag feststellen, dass das Paper fehlerhaft ist und die aktuelle Version von Pijul nicht funktioniert.</p>
<p>[Kurze Werbepause: Das Idee des Papers ist richtig cool! Die Autoren gehen von der Kategorie der “normalen”, linearen Dokumente aus und wollen dann “mergen” als Pushout modellieren. Damit Patches immer gemergt werden können, sollte die Kategorie endlich kovollständig sein, damit alle Pushouts existieren. Deshalb gehen die Autoren zur freien konservativen (schon existierende Kolimiten bleiben erhalten) Kovervollständigung der Kategorie der linearen Dokumente über. Diese Kovervollständigung kann man nach einem Folklore-Theorem explizit als volle Unterkategorie der Kategorie der Prägarben auf der Kategorie der linearen Dokumente beschreiben. Im Hauptteil des Papers leiten die Autoren eine viel konkretere, graphentheoretische (aber leider falsche) Beschreibung dieser Kategorie her.]</p>
<p>Aufgrund der vortgeschrittenen Zeit wurde Profpatsch’s Vortrag verschoben.</p>
</article>
]]></description>
    <pubDate>Wed, 29 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-06-29-siebzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das achtzehnte Treffen am 8. September 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-06-29-achtzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das achtzehnte Treffen am 8. September 2016</h1>
    <div class="info">
      Gepostet am 29. Jun 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p>Marc wird über <em>Hygienische Makros: Praxis, Theorie und Implementierung am Beispiel von Scheme</em> sprechen.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/XS6P4aK6rWY" frameborder="0" allowfullscreen>
</iframe>
<p>Profpatsch stellt eine pragmatische Implementierung von Internationalisierung (i18n) in Haskell vor.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/zBEgbSuuLwU" frameborder="0" allowfullscreen>
</iframe>
<p>corny wird über <em>praktische Firewalltheorie</em> sprechen. Dabei verlassen wir kurzzeitig unseren Elfenbeinturm und schauen uns die wahre Schönheit von <em>iptables</em> an. Sobald wir diesen Realitätsschock überwunden haben, kommen wir aber wieder schnell in unsere heile Isabelle-Welt zurück. Oh nein, etwas stimmt nicht in unseren heilen Welt! Was kann das sein?</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/Yrpp8ZKWcbY" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Wed, 29 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-06-29-achtzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das sechzehnte Treffen am 14. Juli 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-06-15-sechzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das sechzehnte Treffen am 14. Juli 2016</h1>
    <div class="info">
      Gepostet am 15. Jun 16
      
          von Matthias Hutzler
      
    </div>
    
    
  </header>

  <iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/tfEQzR9-hlQ?list=PLwpepnYDFK9Mtt1iy8zRVjNLVV50dDgiO" frameborder="0" allowfullscreen>
</iframe>
<p>Makarius stellte <a href="http://www.flatmap.net/cobra">Cobra</a> vor, ein modernes Framework, um Code und Beweise zu präsentieren. Cobra unterstützt Isabelle-Beweise sowie Scala- und Haskell-Code.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/CratUcZGFuI?list=PLwpepnYDFK9Mtt1iy8zRVjNLVV50dDgiO" frameborder="0" allowfullscreen>
</iframe>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/m6k-ag8o0rI?list=PLwpepnYDFK9Mtt1iy8zRVjNLVV50dDgiO" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo begann unter dem Titel <em>Was sind und was sollen die Typen?</em> eine Einführung in Typtheorie unter besonderer Beachtung von Homotopietyptheorie. Die grundlegende Motivation aus der Informatik und der Programmierpraxis sind natürlich bekannt: Man möchte zur Compilezeit Informationen über das Programmverhalten gewinnen, um fehlerhafte Programme noch vor ihrer Ausführung erkennen und ablehnen zu können.</p>
<p>Aber es ist vielleicht weniger bekannt, wie Typtheorie entstanden ist (das war nämlich lange vor den Programmiersprachen), welches Problem sie ursprünglich lösen sollte (und auch tatsächlich löst), und wie ein Typsystem aufgebaut ist.</p>
<p>Ziel des ersten Teils war, ein Grundverständnis im Lesen von Typsystemspezifikationen zu vermitteln. Es wurde extensionale und intensionale Martin-Löf-Typtheorie behandelt.</p>
<p>Homotopietyptheorie ist ein neuer Zweig der Mathematik, der Aspekte von verschiedenen anderen Teilgebieten der Mathematik auf verblüffende Art und Weise kombiniert. Es ist Teil von Voevoedskys Programm zu einer <em>univalenten Grundlegung</em> der Mathematik und basiert auf einer kürzlich entdeckten Verbindung zwischen Homotopietheorie aus der Mathematik und Typtheorie aus der Logik und theoretischen Informatik.</p>
<p>In gewöhnlichen Zugängen zu einer Grundlegung der Mathematik unterscheidet man zwischen Objekten (wie zum Beispiel natürlichen Zahlen und Mengen) und Aussagen über diese Objekte. In Homotopietyptheorie gibt es diese Unterscheidung nicht. Objekte und Aussagen über Objekte werden auf eine gemeinsame Stufe gestellt. Beweisen und Konstruieren werden miteinander identifiziert.</p>
<p>Der Vortrag setzt keine Vorkenntnisse aus Logik und Typtheorie und selbstverständlich auch keine aus Homotopietheorie voraus. Der Vortrag ist für Leute konzipiert, die sich für diese neue Bewegung in der Logik interessieren, aber nicht praktizierende Mathematikerinnen sind.</p>
<p>Er klärt folgende Fragen: Was hat es mit Homotopietyptheorie auf sich? Wie werden in Homotopietyptheorie Objekte und Aussagen miteinander vereint, auf eine Stufe gestellt? Wozu ist Homotopietyptheorie gut? Wieso und für wen ist sie interessant?</p>
<p>Ein Teil der Antwort auf die letzte Frage lautet: Homotopietyptheorie ist für Leute interessant, die computergestützt Beweise führen möchten.</p>
</article>
]]></description>
    <pubDate>Wed, 15 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-06-15-sechzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das fünfzehnte Treffen am 16. Juni 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-05-17-fuenfzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das fünfzehnte Treffen am 16. Juni 2016</h1>
    <div class="info">
      Gepostet am 17. Mai 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/wSaGjm4qqNc?list=PLwpepnYDFK9NTzNM7VTw2OoDuhKtWS6KB" frameborder="0" allowfullscreen>
</iframe>
<p>Ingo stellte <a href="/files/initiale-algebren.pdf">Minimalwissen zu initialen Algebren und terminalen Koalgebren</a> bereit. Diese verwendet man (unter anderem), um Datentypen mathematisch zu modellieren. In Form von Cata- und Anamorphismen haben sie aber auch eine ganz praktische Bedeutung in der Abstraktion von bekannten Rekursionsmustern.</p>
<p>Initiale Algebren und terminale Koalgebren untersucht man deswegen, weil sie einen geeigneten Rahmen geben, um Fixpunktgleichungen für <em>Strukturen</em> (statt <em>Zahlen</em> oder <em>Elemente</em> von Datentypen) zu verstehen.</p>
<p>Zum Beispiel ist die Struktur der natürlichen Zahlen eine Lösung von folgender Fixpunktgleichung:</p>
<pre><code>N = 1 + N
-- mit der rechten Seite ist gemeint: {*} disjunkt-vereinigt-mit N
-- in Haskell würde man schreiben: data N = Zero | Succ N</code></pre>
<p>Die Struktur der endlichen Listen mit Einträgen aus A ist eine Lösung von</p>
<pre><code>L = 1 + A x L.
-- in Haskell: data L = Nil | Cons A L</code></pre>
<p>Nun sind das aber nicht wirklich Gleichungen. Es sind aber auch nicht einfach nur “Isomorphiebeziehungen”. Es ist etwas dazwischen – es sind initiale Algebren. Jede initiale Algebra bringt jeweils ein eigenes Konzept mit, um Funktionen aus der so definierten Struktur rekursiv definieren zu können. Im Falle der natürlichen Zahlen ist das im Wesentlichen das bekannte Rekursionsprinzip (definiere für 0 und definiere für n+1).</p>
<p>Der Vortrag erklärte, was initiale Algebren sind, welche Vorstellung sie fassen und wozu man sie in der Informatik verwendet. Das Thema ist für manche Teile der theoretischen Informatik absolut grundlegend, man kann kaum über die Semantik von Programmiersprachen (welche benutzerdefinierte Datentypen erlauben) sprechen, ohne Minimalwissen von initialen Algebren zu haben. Auch für den praktischen Umgang mit Rekursion sind sie interessant, da sie manche Dinge mit einer konzeptionellen, abstrakten Interpretation versehen.</p>
<p>Wir gingen auch auf das Gegenstück zu initialen Algebren ein, nämlich terminale Koalgebren. Und es gab einen “witzigen” Wettbewerb.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/CeJoWI7maMU?list=PLwpepnYDFK9NTzNM7VTw2OoDuhKtWS6KB" frameborder="0" allowfullscreen>
</iframe>
<p>Tim stellt seine WIP-Haskell-Bibliothek <a href="https://github.com/timjb/ftypes">ftypes</a> vor. In FTypes werden die bekannten Typklassen <code>Functor</code>, <code>Applicative</code> und <code>Traversable</code> auf Typen vom Kind <code>(k -&gt; *) -&gt; *</code> übertragen. Dies hat Anwendungen etwa beim Schreiben von bidirektionalen Parsern für Produkttypen.</p>
<p>Tim hat vergessen, ein paar Sachen zu erwähnen, die er sich eigentlich vorgenommen hatte. Darum hat er sie <a href="https://gist.github.com/timjb/275f78e9dd449671c4b76dbdbeec574c">hier aufgeschrieben</a>.</p>
</article>
]]></description>
    <pubDate>Tue, 17 May 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-05-17-fuenfzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>
<item>
    <title>Programm für das vierzehnte Treffen am 19. Mai 2016</title>
    <link>http://curry-club-augsburg.de/posts/2016-04-24-vierzehntes-treffen.html</link>
    <description><![CDATA[<article>
  <header>
    <h1>Programm für das vierzehnte Treffen am 19. Mai 2016</h1>
    <div class="info">
      Gepostet am 24. Apr 16
      
          von Ingo Blechschmidt
      
    </div>
    
    
  </header>

  <p><a href="https://github.com/mnieper">Marc</a> setzte die Reihe über <em>rein funktionale Datenstrukturen</em> (begonnen durch <a href="/posts/2015-12-04-zehntes-treffen.html">Tims Vortrag zu Warteschlangen</a> mit einem Vortrag über <a href="https://de.wikipedia.org/wiki/Rot-Schwarz-Baum">Rot-Schwarz-Bäume</a> in Scheme fort.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/JOiURKrhnSo" frameborder="0" allowfullscreen>
</iframe>
<p>Die während des Vortrags erstellte Scheme-Implementierung <a href="https://gitlab.com/nieper/immutable-maps">steht auf GitLab</a>.</p>
<p>Außerdem setzte Makarius die Reihe <em>Schönheit und Kunst</em> mit weiterer Arbeit in Isabelle fort: Er löste Aufgabe 12 der <a href="https://github.com/curry-club-aux/haskell-workshop/raw/gh-pages/uebung.pdf">beiden</a> <a href="https://github.com/curry-club-aux/haskell-workshop/raw/gh-pages/uebung2.pdf">Workshops</a> (Run-Length-Encoding), und zwar erstens “diesmal wirklich” und zweitens absolut vollständig. Damit ist natürlich gemeint, dass er die Korrektheit seiner Lösung in Isabelle bewies. Außerdem stellte er einen Geschwindigkeitsrekord für die Implementierung der Übungsaufgabe in mehreren Programmiersprachen auf.</p>
<iframe width="640" height="360" src="https://www.youtube-nocookie.com/embed/pNp6zwj-sTs?list=PLwpepnYDFK9MlOdZaWfhnRVt5PHGasrFr" frameborder="0" allowfullscreen>
</iframe>
</article>
]]></description>
    <pubDate>Sun, 24 Apr 2016 00:00:00 UT</pubDate>
    <guid>http://curry-club-augsburg.de/posts/2016-04-24-vierzehntes-treffen.html</guid>
    <dc:creator>Curry Club Augsburg</dc:creator>
</item>

    </channel>
</rss>
